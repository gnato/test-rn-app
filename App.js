/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow
 * @lint-ignore-every XPLATJSCOPYRIGHT1
 */

import React, {Component} from 'react';
import {StyleSheet, Text, View, AppRegistry, PermissionsAndroid, AsyncStorage, TextInput, Platform} from 'react-native';

import axios from 'axios';
import PushNotification from 'react-native-push-notification';

// This is used in order to see requests on the Chrome DevTools
//XMLHttpRequest = GLOBAL.originalXMLHttpRequest ? GLOBAL.originalXMLHttpRequest : GLOBAL.XMLHttpRequest;

var setWho = async (val) => {
    try {
      await AsyncStorage.setItem('@sgtest:who', val);
    } catch (error) {
      // Error saving data
    }
};

var getWho = async () => {
    try {
      const value = await AsyncStorage.getItem('@sgtest:who');
      if (value !== null) {
        return value;
      }
    } catch (error) {
      // Error retrieving data
    }
};


const CallLog = async (data) => {
    console.log('START', data);

    var who = await getWho();
    var ver = 'v01';

    axios.get( `http://sgtest.gnstudio.pl/endpoint.php?who=${who}&ver=${ver}`)
        .then(function (response) {
            // handle success
            console.log('response', response);

            var opts = {
                /* Android Only Properties */
                id: '6', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                bigText: "Długa wiadomość po rozwinięciu notyfikacji", // (optional) default: "message" prop
                color: "red", // (optional) default: system default
                vibrate: true, // (optional) default: true
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                tag: 'some_tag', // (optional) add tag to message
                group: "group", // (optional) add group to message
                ongoing: false, // (optional) set whether this is an "ongoing" notification
                title: "Wysłano numer telefonu", // (optional)
                message: "ERROR", // (required)
                userInfo: { id: '6' }
            };

            if(response.data == 'OK') {
                opts.color = 'green';
                opts.message = 'SUKCES';
            }

            PushNotification.localNotification(opts);

        })
        .catch(function (error) {
            // handle error
            console.log('error', error);
        })
        .then(function () {
            // always executed
            console.log('always');
        });
}

AppRegistry.registerHeadlessTask('CallLog', () => CallLog);


type Props = {};
export default class App extends Component<Props> {

    constructor(props) {
        super(props);

        this.state = {
            who: ''
        };
    }


  componentDidMount() {
    this.checkPermissions();
  }

  async checkPermissions() {


    var who = await getWho();
    this.setState({who});





    if (Platform.OS === 'android') {
        const isGranted = await PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE);
        if (isGranted) {
            return true;
        }
        try {
            console.log('before request');
            const granted = await PermissionsAndroid.request(
                PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE, {
                    title: 'Dialog Title',
                    message: 'Dialog Message',
                }
            );
            console.log('after request');
            return granted === PermissionsAndroid.RESULTS.GRANTED;
        }
        catch (err) {
            console.log('error');
            console.log(err);
        }
    }

  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.welcome}>Testowa apka do połączeń</Text>
        <TextInput
          style={styles.ipt}
          placeholder="Tu ma być wpisany user"
          value={this.state.who}
          onChangeText={(text) => {
              this.setState({text});
              setWho(text);
          }}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  instructions: {
    textAlign: 'center',
    color: '#333333',
    marginBottom: 5,
  },
  ipt: {
    textAlign: 'center',
    color: '#333333',
    height: 40,
    borderWidth: 1,
    borderColor: '#333333'
  },
});
